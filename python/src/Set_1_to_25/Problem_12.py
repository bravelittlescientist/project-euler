#!/usr/bin/python
#
# Problem 12
# 
# The sequence of triangle numbers is generated by adding the 
# natural numbers. What is the value of the first triangle number 
# to have over five hundred divisors?

import unittest
from sets import Set
import math

class Test_Problem_12(unittest.TestCase):

	def test_first_triangle_number_to_have_over_3_divisors(self):
		""" 6 is the first triangle number to have more than 3 divisors """
		self.assertEqual(6, first_triangle_number_over_n_divisors(3))

	def test_first_triangle_number_to_have_over_5_divisors(self):
		""" 28 is the first triangle number to have more than 5 divisors """
		self.assertEqual(28, first_triangle_number_over_n_divisors(5))

	def test_compute_divisors_quantities_correctly(self):
		""" Correctly compute quantities of divisors """
		self.assertEqual(1, compute_divisor_quantity(1))
		self.assertEqual(2, compute_divisor_quantity(3))
		self.assertEqual(4, compute_divisor_quantity(15))
		self.assertEqual(6, compute_divisor_quantity(28))

def compute_divisor_quantity(n):
	# Initialize Set
	divisors = Set()
	divisors.add(n)

	# Compute divisors
	tracker = 1
	while tracker <= math.sqrt(n):
		if not n % tracker:
			divisors.add(tracker)
			divisors.add(n / tracker)		
		tracker += 1

	return len(divisors)

def first_triangle_number_over_n_divisors(n):
	""" Compute triangle numbers and their divisors	"""
	natural = 1
	triangle = 1
	while compute_divisor_quantity(triangle) <= n:
		natural += 1
		triangle += natural

	return triangle

if __name__ == '__main__':
	suite = unittest.TestLoader().loadTestsFromTestCase(Test_Problem_12)
	unittest.TextTestRunner(verbosity=2).run(suite)

	print "Over 500 divisors:",first_triangle_number_over_n_divisors(500)
